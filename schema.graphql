scalar DateTime

""" These unions are a way for a property to hold references to different types """
union Enterable = Group | Person | Reference | Schema | Character | State | Description | CharacterInstance | Specimen | Collection

union Groupable = Reference | Schema | Character | State | Description | CharacterInstance | Specimen | Collection

union Authorable = Reference | Schema

union Statable = Character | State

union Characterable = Schema | Character

union Citer = Schema | Description | Specimen

type Group {
    pbotID: ID!
    name: String
    members: [Person!]! @relation(name: "MEMBER_OF", direction: IN)
    elements: [Groupable!]! @relation(name: "ELEMENT_OF", direction: IN)
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
    enteredBy: [GroupEnteredBy]
}

""" Note that I had to use the cypher directive to populate the entered property.
    Ideally, this would be handled by a relation directive, but that does not appear to
    work with unions. """
type Person {
    pbotID: ID!
    password: String
    given: String
    surname: String
    email: String
    orcid: String
    entered:   [Enterable] @cypher(
      statement: "match (n)-[:ENTERED_BY]->(this) return n"
    )
    authored: [Authorable!]! @relation(name: "AUTHORED_BY", direction: IN)
    memberOf: [Group!]! @relation(name: "MEMBER_OF", direction: OUT)
    enteredBy: [PersonEnteredBy]
}

type Reference {
    pbotID: ID!
    title: String
    year: String
    publisher: String
    doi: String
    citedBy: [Citer!]! @relation(name: "CITED_BY", direction: OUT)
    authoredBy: [ReferenceAuthoredBy!]!
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
    enteredBy: [ReferenceEnteredBy]
}

type Schema {
    pbotID: ID!
    title: String
    year: String
    acknowledgments: String
    references: [SchemaCitedBy]
    characters: [Character] @relation(name: "CHARACTER_OF", direction: IN)
    authoredBy: [SchemaAuthoredBy!]!
    appliedBy: [Description]! @relation(name: "APPLICATION_OF", direction: IN)
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
    enteredBy: [SchemaEnteredBy]
}

type Character {
    pbotID: ID!
    name: String
    definition: String
    characterOf: Characterable! @cypher(
      statement: "match (this)-[:CHARACTER_OF]->(n) return n limit 1"
    )
    characters: [Character!]! @relation(name: "CHARACTER_OF", direction: IN)
    states: [State!]! @relation(name: "STATE_OF", direction: IN)
    characterInstances: [CharacterInstance!]! @relation(name: "INSTANCE_OF" direction: IN)
    enteredBy: [CharacterEnteredBy]
}

type State {
    pbotID: ID!
    name: String
    definition: String
    stateOf:  Statable! @cypher(
      statement: "match (this)-[:STATE_OF]->(n) return n limit 1"
    )
    states: [State!]! @relation(name: "STATE_OF", direction: IN)
    characterInstances: [HasState]
    enteredBy: [StateEnteredBy]
}

""" Description Complex types """
type Organ {
    pbotID: ID!
    type: String
    specimens: [Specimen!]! @relation(name: "IS_TYPE" direction: IN)
    enteredBy: [OrganEnteredBy]
}

"""Note: schema should be non null, but isn't right now due to missing data"""
type Description {
    pbotID: ID!
	name: String
    characterInstances: [CharacterInstance!]! @relation(name: "DEFINED_BY", direction: OUT)
    specimens: [DescribedBy]
    schema: Schema @relation(name: "APPLICATION_OF", direction: OUT)
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
    references: [DescriptionCitedBy]
    enteredBy: [DescriptionEnteredBy]
}

type CharacterInstance {
    pbotID: ID!
    character: Character @relation(name: "INSTANCE_OF", direction: OUT)
    state: HasState
    candidateForArchtype: Description @relation(name: "CANDIDATE_FOR", direction: OUT)
    description: Description @relation(name: "DEFINED_BY" direction: IN)
    enteredBy: [CharacterInstanceEnteredBy]
}

type PseudoCharacterInstance {
    pbotID: ID!
    character: Character @relation(name: "INSTANCE_OF", direction: OUT)
    state: HasState
    candidateForArchtype: Description @relation(name: "CANDIDATE_FOR", direction: OUT)
    description: Description @relation(name: "DEFINED_BY" direction: IN)
    enteredBy: [CharacterInstanceEnteredBy]
    characterName: String
    characterID: String
    stateName: String
    stateID: String
    stateOrder: String
    stateValue: String
}

type OTU {
    pbotID: ID!
	name: String
	family: String
	genus: String
	species: String
    exampleSpecimens: [ExampleOf!]!
    holotype: HolotypeOf!
    mergedDescription: [PseudoCharacterInstance!]! @cypher(
        statement: """
            MATCH
                (otu:OTU {pbotID:this.pbotID})<-[:EXAMPLE_OF]-(specimen:Specimen)-[:DESCRIBED_BY]->(d:Description)-[:DEFINED_BY]->(ci:CharacterInstance),
                (ci)-[:INSTANCE_OF]->(c:Character),
                (ci)-[hs:HAS_STATE]->(s:State) 
            WITH
                DISTINCT c, s{.*, value: hs.value, order:avg(hs.order)} //Tuck the order and value relationship properties in temp object with state for use later. For order, we want to save the average value for this state. By aggregating on order, we also limit s to distinct states, so we don't need to specify DISTINCT. 
            RETURN
                {   
                    characterName: c.name,
                    characterID: c.pbotID,
                    stateName: s.name,
                    stateID: s.pbotID,
                    stateOrder: s.order,
                    stateValue: s.value
                } AS ci
        """
    )
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
}

type Specimen {
    pbotID: ID!
    name: String
    locality: String
    preservationMode: String
    idigbiouuid: String
    pbdbcid: String
    pbdboccid: String
    organ: Organ @relation(name: "IS_TYPE", direction: OUT)
    describedBy: [DescribedBy]
    exampleOf: ExampleOf
    holotypeOf: HolotypeOf
    references: [SpecimenCitedBy]
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
    collection: Collection @relation(name: "COLLECTED_IN", direction: OUT)
    enteredBy: [SpecimenEnteredBy]
}

type Collection {
    pbotID: ID!
    name: String
    specimens: [Specimen]! @relation(name: "COLLECTED_IN", direction: IN)
    references: [CollectionCitedBy]
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
    enteredBy: [CollectionEnteredBy]
}


""" In order to access relationship properties, the relationship must be specified with a standalone type.
    Ideally, there would be one of these for the ENTERED_BY relationship, with the Enterable union in the
    from property. That does not work. So, I've had to resort to creating a separate type for each node type
    that could be in the from property. I'm not sure of the cons here. It looks like crap though. """
type GroupEnteredBy @relation(name: "ENTERED_BY") {
  from: Group
  to: Person
  timestamp: DateTime
}

type PersonEnteredBy @relation(name: "ENTERED_BY") {
  from: Person
  to: Person
  timestamp: DateTime
}

type ReferenceEnteredBy @relation(name: "ENTERED_BY") {
  from: Reference
  to: Person
  timestamp: DateTime
}

type SchemaEnteredBy @relation(name: "ENTERED_BY") {
  from: Schema
  to: Person
  timestamp: DateTime
}

type CharacterEnteredBy @relation(name: "ENTERED_BY") {
  from: Character
  to: Person
  timestamp: DateTime
}

type StateEnteredBy @relation(name: "ENTERED_BY") {
  from: State
  to: Person
  timestamp: DateTime
}

type OrganEnteredBy @relation(name: "ENTERED_BY") {
  from: Organ
  to: Person
  timestamp: DateTime
}

type DescriptionEnteredBy @relation(name: "ENTERED_BY") {
  from: Description
  to: Person
  timestamp: DateTime
}

type CharacterInstanceEnteredBy @relation(name: "ENTERED_BY") {
  from: CharacterInstance
  to: Person
  timestamp: DateTime
}

type SpecimenEnteredBy @relation(name: "ENTERED_BY") {
  from: Specimen
  to: Person
  timestamp: DateTime
}

type CollectionEnteredBy @relation(name: "ENTERED_BY") {
  from: Collection
  to: Person
  timestamp: DateTime
}

"""AUTHORED_BY for access to order"""
type ReferenceAuthoredBy @relation(name: "AUTHORED_BY") {
  from: Reference
  to: Person
  order: String
}

type SchemaAuthoredBy @relation(name: "AUTHORED_BY") {
  from: Schema
  to: Person
  order: String
}

"""CITED_BY for access to order"""
type SchemaCitedBy @relation(name: "CITED_BY") {
  from: Reference
  to: Schema
  order: String
}

type DescriptionCitedBy @relation(name: "CITED_BY") {
  from: Reference
  to: Description
  order: String
}

type SpecimenCitedBy @relation(name: "CITED_BY") {
  from: Reference
  to: Specimen
  order: String
}

type CollectionCitedBy @relation(name: "CITED_BY") {
  from: Reference
  to: Collection
  order: String
}

""" HAS_STATE for access to value and order"""
type HasState @relation(name: "HAS_STATE") {
    from: CharacterInstance
    to: State
    value: String
    order: String
}


""" EXAMPLE_OF for access to entered_by and timestamp """
type ExampleOf @relation(name: "EXAMPLE_OF") {
    from: Specimen
    to: OTU
    entered_by: ID!
    timestamp: DateTime
}

""" HOLOTYPE_OF for access to entered_by and timestamp """
type HolotypeOf @relation(name: "HOLOTYPE_OF") {
    from: Specimen
    to: OTU
    entered_by: ID!
    timestamp: DateTime
}

""" DESCRIBED_BY for access to entered_by and timestamp """
type DescribedBy @relation(name: "DESCRIBED_BY") {
    from: Specimen
    to: Description
    entered_by: ID!
    timestamp: DateTime
}



type Query {        
    """
    Not sure this will be useful, but it's a way to get at the leaf states in state hierarchies."""
    GetLeafStates(characterID: String!): [State]
        @cypher(
            statement: """
                match 
                    (:Character {pbotID: $characterID})<-[:STATE_OF*1..100]-(n:State) 
                where  
                    not (n)<-[:STATE_OF]-(:State) 
                return n            
            """
        )

    GetAllStates(characterID: String!): [State]
        @cypher(
            statement: """
                match 
                    (:Character {pbotID: $characterID})<-[:STATE_OF*1..100]-(n:State) 
                return n            
            """
        )

    GetAllCharacters(schemaID: String!): [Character]
        @cypher(
            statement: """
                match 
                    (:Schema {pbotID: $schemaID})<-[:CHARACTER_OF*1..100]-(n:Character) 
                return n            
            """
        )

}


""" //////////////////////////////////////////////////////////////////////////////////////////////////////
Mutations overrides. We might want to think about only using these, rather than any generated mutations. 
    TODO: To make these true overrides, delete the 'Custom' prefix. """

input GroupInput {
    pbotID: String
    name: String
    members: [String]
    elements: [String]
	groups: [String]
    enteredByPersonID: String
}

input PersonInput {
    pbotID: String
    given: String
	surname: String
	email: String
	orcid: String
	groups: [String]
	enteredByPersonID: String
} 

input AuthoredBy {
    pbotID: String
    order: String
}

input ReferenceInput {
    pbotID: String
    title: String
	year: String
	publisher: String
	doi: String
	authors: [AuthoredBy!]!
	groups: [String]
	enteredByPersonID: String
} 

input CitedBy {
    pbotID: String
    order: String
}

input SchemaInput {
    pbotID: String
    title: String
	year: String
    acknowledgments: String
	references: [CitedBy]
	authors: [AuthoredBy!]!
	groups: [String]
	enteredByPersonID: String
	cascade: Boolean
}

input CharacterInput {
    pbotID: String
    name: String
    definition: String
    parentID: String
    schemaID: String
	enteredByPersonID: String
	cascade: Boolean
}

input StateInput {
    pbotID: String
    name: String
    definition: String
    parentID: String
    schemaID: String
	enteredByPersonID: String
	cascade: Boolean
}

input DescriptionInput {
    pbotID: String
    specimenIDs: [String]
	name: String!
	family: String
	genus: String
	species: String
	schemaID: String!
    references: [CitedBy]
	groups: [String]
	enteredByPersonID: String
	cascade: Boolean
}

input CharacterInstanceInput {
    pbotID: String
    descriptionID: String!
    characterID: String!
    stateID: String!
    quantity: String
    order: String
	enteredByPersonID: String
}

type OTUInput {
    pbotID: ID!
	name: String
	family: String
	genus: String
	species: String
    exampleSpecimens: [ExampleOf!]!
    holotype: HolotypeOf!
    elementOf: [Group!]! @relation(name: "ELEMENT_OF", direction: OUT)
}

input SpecimenInput {
    pbotID: String
    name: String!
    locality: String
    preservationMode: String
    idigbiouuid: String
    pbdbcid: String
    pbdboccid: String
    descriptionIDs: [String]
    exampleOf: String
    holotypeOf: String
    organID: String
    references: [CitedBy]
    collection: String
	groups: [String]
	enteredByPersonID: String
}

input OrganInput {
    pbotID: String
    type: String!
	enteredByPersonID: String
}

input CollectionInput {
    pbotID: String
    name: String
    specimens: [String]
	references: [CitedBy]
	groups: [String]
    enteredByPersonID: String
}


type Mutation {
    CreateGroup(data: GroupInput!): Group! @neo4j_ignore
    UpdateGroup(data: GroupInput!): Group!  @neo4j_ignore
    DeleteGroup(data: GroupInput!): Group! @neo4j_ignore

        
    CreatePerson(data: PersonInput!): Person! @neo4j_ignore
    UpdatePerson(data: PersonInput!): Person! @neo4j_ignore
    DeletePerson(data: PersonInput!): Person! @neo4j_ignore

    CreateReference(data: ReferenceInput!): Reference! @neo4j_ignore
    UpdateReference(data: ReferenceInput!): Reference! @neo4j_ignore
    DeleteReference(data: ReferenceInput!): Reference! @neo4j_ignore

    CreateSchema(data: SchemaInput!): Schema! @neo4j_ignore
    UpdateSchema(data: SchemaInput!): Schema! @neo4j_ignore
    DeleteSchema(data: SchemaInput!): Schema! @neo4j_ignore
    
    CreateCharacter(data: CharacterInput!): Character! @neo4j_ignore
    UpdateCharacter(data: CharacterInput!): Character! @neo4j_ignore
    DeleteCharacter(data: CharacterInput!): Character! @neo4j_ignore

    CreateState(data: StateInput!): State! @neo4j_ignore
    UpdateState(data: StateInput!): State! @neo4j_ignore
    DeleteState(data: StateInput!): State! @neo4j_ignore

    CreateDescription(data: DescriptionInput!): Description! @neo4j_ignore
    UpdateDescription(data: DescriptionInput!): Description! @neo4j_ignore
    DeleteDescription(data: DescriptionInput!): Description!  @neo4j_ignore

    """NOTE: Keeping CharacterInstance create and update here rather than in Resolvers.js because of the need 
    to check that the State is associated with the Character. It's too specific to fit with the generic approach 
    of the cypher-building code in Resolvers.js. Similarly, recording the old value of HAS_STATE for a quantity
    State is also too specific.
    NOTE: That last sentence is no longer accurate. We are now generically recording relationship states where they occur."""
    CreateCharacterInstance(data: CharacterInstanceInput!): CharacterInstance!
        @cypher(
            statement: """
                MATCH 
                    (description:Description {pbotID: $data.descriptionID}),
					(description)-[:ELEMENT_OF]->(group:Group),
                    (character:Character {pbotID: $data.characterID})<-[:CHARACTER_OF*0..]-()<-[:STATE_OF*1..]-(state:State {pbotID: $data.stateID}),
                    (person:Person {pbotID: $data.enteredByPersonID})
				WITH
					collect(group) AS groups, description, character, state, person
                CREATE 
                    (description)-[:DEFINED_BY]->(characterInstance:CharacterInstance {
                        pbotID: apoc.create.uuid()
                    })-[:ENTERED_BY {timestamp: datetime(), type:"CREATE"}]->(person),
                    (character)<-[:INSTANCE_OF]-(characterInstance),
                    (state)<-[:HAS_STATE {value: $data.quantity, order: $data.order}]-(characterInstance) 
				WITH groups, characterInstance
				FOREACH (group IN groups |
					CREATE	
						(characterInstance)-[:ELEMENT_OF]->(group)
                )
                RETURN characterInstance
            """
        )
    UpdateCharacterInstance(data: CharacterInstanceInput!): CharacterInstance! 
        @cypher(
            statement: """
                MATCH 
                    (characterInstance:CharacterInstance {pbotID: $data.pbotID}),
                    (ePerson:Person {pbotID: $data.enteredByPersonID})
                WITH characterInstance, ePerson					
				CREATE
					(characterInstance)-[eb:ENTERED_BY {timestamp: datetime(), type:"EDIT"}]->(ePerson)
				WITH characterInstance, eb
                OPTIONAL MATCH
					(oldCharacter:Character)<-[oldCharacterRelationship:INSTANCE_OF]-(characterInstance)
				DELETE oldCharacterRelationship
                WITH characterInstance, eb, oldCharacter					
                    CALL apoc.do.case([
                            oldCharacter IS NULL AND $data.characterID IS NOT NULL,
                            "SET eb.character = 'not present' RETURN eb",
                            oldCharacter IS NOT NULL AND ($data.characterID IS NULL OR oldCharacter.pbotID  <> $data.characterID),
                            "SET eb.character = oldCharacter.pbotID RETURN eb"],
                            "RETURN eb",
                            {oldCharacter: oldCharacter, eb: eb}
                        ) YIELD value
                WITH characterInstance, eb					
                OPTIONAL MATCH
					(oldState:State)<-[oldStateRelationship:HAS_STATE]-(characterInstance)
                WITH characterInstance, eb, oldState, oldStateRelationship				
                    CALL apoc.do.case([
                            oldState IS NULL AND $data.stateID IS NOT NULL,
                            "SET eb.state = 'not present' RETURN eb",
                            oldState IS NOT NULL AND ($data.stateID IS NULL OR oldState.pbotID  <> $data.stateID OR (oldStateRelationship.value IS NOT NULL AND oldStateRelationship.value <> $data.quantity) OR (oldStateRelationship.order IS NOT NULL AND oldStateRelationship.order <> $data.order)),
                            "SET eb.state = oldState.pbotID, eb.value = oldStateRelationship.value, eb.order = oldStateRelationship.order RETURN eb"],
                            "RETURN eb",
                            {oldState: oldState, oldStateRelationship: oldStateRelationship, eb: eb}
                        ) YIELD value
                        DELETE oldStateRelationship
				WITH characterInstance
				MATCH
                    (character:Character {pbotID: $data.characterID})<-[:CHARACTER_OF*0..]-()<-[:STATE_OF*1..]-(state:State {pbotID: $data.stateID})
                CREATE 
                    (character)<-[:INSTANCE_OF]-(characterInstance),
                    (state)<-[:HAS_STATE {value: $data.quantity, order: $data.order}]-(characterInstance) 
                RETURN characterInstance
            """
        )
    DeleteCharacterInstance(data: CharacterInstanceInput!): CharacterInstance! @neo4j_ignore

    CreateSpecimen(data: SpecimenInput!): Specimen! @neo4j_ignore
    UpdateSpecimen(data: SpecimenInput!): Specimen! @neo4j_ignore
    DeleteSpecimen(data: SpecimenInput!): Specimen! @neo4j_ignore

    CreateCollection(data: CollectionInput!): Collection! @neo4j_ignore
    UpdateCollection(data: CollectionInput!): Collection!  @neo4j_ignore
    DeleteCollection(data: CollectionInput!): Collection! @neo4j_ignore

    CreateOrgan(data: OrganInput!): Organ! @neo4j_ignore
    UpdateOrgan(data: OrganInput!): Organ! @neo4j_ignore
    DeleteOrgan(data: OrganInput!): Organ! @neo4j_ignore

}
