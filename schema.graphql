scalar DateTime

""" These unions are a way for a property to hold references to different types """
union Enterable = Person | Reference | Schema | Character | State

union Authorable = Reference | Schema

union Statable = Character | State

""" Note that I had to use the cypher directive to populate the entered property.
    Ideally, this would be handled by a relation directive, but that does not appear to
    work with unions. """
type Person {
    personID: ID!
    given: String
    surname: String
    email: String
    orcid: String
    entered:   [Enterable] @cypher(
      statement: "match (n)-[:ENTERED_BY]->(this) return n"
    )
    authored: [Authorable!]! @relation(name: "AUTHORED_BY", direction: IN)
}

type Reference {
    referenceID: ID!
    title: String
    year: String
    publisher: String
    doi: String
    citedBy: [Schema!]! @relation(name: "CITED_BY", direction: OUT)
    authoredBy: [Person!]! @relation(name: "AUTHORED_BY", direction: OUT)
    enteredBy: [ReferenceEnteredBy]
}

type Schema {
    schemaID: ID!
    title: String
    year: String
    cites: [Reference!]! @relation(name: "CITED_BY", direction: IN)
    characters: [Character] @relation(name: "CHARACTER_OF", direction: IN)
    authoredBy: [Person!]! @relation(name: "AUTHORED_BY", direction: OUT)
    enteredBy: [SchemaEnteredBy]
}

type Character {
    characterID: ID!
    name: String
    characterOfSchema: Schema! @relation(name: "CHARACTER_OF", direction: OUT)
    states: [State!]! @relation(name: "STATE_OF", direction: IN)
    characterInstances: [CharacterInstance!]! @relation(name: "INSTANCE_OF" direction: IN)
    enteredBy: [CharacterEnteredBy]
}

type State {
    stateID: ID!
    name: String
    definition: String
    stateOf: [Statable!]! @relation(name: "STATE_OF", direction: OUT)
    states: [State!]! @relation(name: "STATE_OF", direction: IN)
    characterInstances: [HasState]
    enteredBy: [StateEnteredBy]
}

""" Description Complex types """
type Organ {
    organID: ID!
    type: String
    specimens: [Specimen!]! @relation(name: "IS_TYPE" direction: IN)
    enteredBy: [OrganEnteredBy]
}

type Description {
    descriptionID: ID!
    type: String
	name: String
	family: String
	genus: String
	species: String
    characterInstances: [CharacterInstance!]! @relation(name: "DEFINED_BY", direction: OUT)
    candidateCharacterInstances: [CharacterInstance!]! @relation(name: "CANDIDATE_FOR", direction: IN)
    exampleSpecimens: [ExampleOf!]!
    specimen: DescribedBy
    enteredBy: [DescriptionEnteredBy]
}

type CharacterInstance {
    characterInstanceID: ID!
    character: Character @relation(name: "INSTANCE_OF", direction: OUT)
    state: HasState
    candidateForArchtype: Description @relation(name: "CANDIDATE_FOR", direction: OUT)
    description: Description @relation(name: "DEFINED_BY" direction: IN)
    enteredBy: [CharacterInstanceEnteredBy]
}

type Specimen {
    specimenID: ID!
    name: String
    organ: Organ @relation(name: "IS_TYPE", direction: OUT)
    description: DescribedBy
    archtypeDescription: ExampleOf
    enteredBy: [SpecimenEnteredBy]
}

""" In order to access relationship properties, the relationship must be specified with a standalone type.
    Ideally, there would be one of these for the ENTERED_BY relationship, with the Enterable union in the
    from property. That does not work. So, I've had to resort to creating a separate type for each node type
    that could be in the from property. I'm not sure of the cons here. It looks like crap though. """
type ReferenceEnteredBy @relation(name: "ENTERED_BY") {
  from: Reference
  to: Person
  timestamp: DateTime
}

type SchemaEnteredBy @relation(name: "ENTERED_BY") {
  from: Schema
  to: Person
  timestamp: DateTime
}

type CharacterEnteredBy @relation(name: "ENTERED_BY") {
  from: Character
  to: Person
  timestamp: DateTime
}

type StateEnteredBy @relation(name: "ENTERED_BY") {
  from: State
  to: Person
  timestamp: DateTime
}

type OrganEnteredBy @relation(name: "ENTERED_BY") {
  from: Organ
  to: Person
  timestamp: DateTime
}

type DescriptionEnteredBy @relation(name: "ENTERED_BY") {
  from: Description
  to: Person
  timestamp: DateTime
}

type CharacterInstanceEnteredBy @relation(name: "ENTERED_BY") {
  from: CharacterInstance
  to: Person
  timestamp: DateTime
}

type SpecimenEnteredBy @relation(name: "ENTERED_BY") {
  from: Specimen
  to: Person
  timestamp: DateTime
}


""" HAS_STATE for access to value """
type HasState @relation(name: "HAS_STATE") {
    from: CharacterInstance
    to: State
    value: String
}


""" EXAMPLE_OF for access to entered_by and timestamp """
type ExampleOf @relation(name: "EXAMPLE_OF") {
    from: Specimen
    to: Description
    entered_by: ID!
    timestamp: DateTime
}

""" DESCRIBED_BY for access to entered_by and timestamp """
type DescribedBy @relation(name: "DESCRIBED_BY") {
    from: Specimen
    to: Description
    entered_by: ID!
    timestamp: DateTime
}



"""
Not sure this will be useful, but it's a way to get at the leaf states in state hierarchies."""
type Query {
    GetLeafStates(characterID: String!): [State]
        @cypher(
            statement: """
                match 
                    (:Character {characterID: $characterID})<-[:STATE_OF*1..100]-(n:State) 
                where  
                    not (n)<-[:STATE_OF]-(:State) 
                return n            
            """
        )

    GetAllStates(characterID: String!): [State]
        @cypher(
            statement: """
                match 
                    (:Character {characterID: $characterID})<-[:STATE_OF*1..100]-(n:State) 
                return n            
            """
        )
}


""" //////////////////////////////////////////////////////////////////////////////////////////////////////
Mutations overrides. We might want to think about only using these, rather than any generated mutations. 
    TODO: To make these true overrides, delete the 'Custom' prefix. """

input PersonInput {
    given: String
	surname: String
	email: String
	orcid: String
	enteredByPersonID: String
} 

input ReferenceInput {
    title: String
	year: String
	publisher: String
	doi: String
	enteredByPersonID: String
} """ TODO: authors """

input SchemaInput {
    title: String
	year: String
	referenceID: String
	enteredByPersonID: String
}

input CharacterInput {
    name: String
    schemaID: String
	enteredByPersonID: String
}

input StateInput {
    name: String
    definition: String
    characterID: String
    parentStateID: String
	enteredByPersonID: String
}

input DescriptionInput {
    type: String!
    specimenID: String
	name: String
	family: String
	genus: String
	species: String
	schemaID: String
	enteredByPersonID: String
}

input CharacterInstanceInput {
    descriptionID: String
    characterID: String
    stateID: String
	enteredByPersonID: String
}

input SpecimenInput {
    name: String
    locality: String
    preservationMode: String
    idigbiouuid: String
    descriptionID: String
    otuID: String
    organID: String
	enteredByPersonID: String
}

input OrganInput {
    type: String
	enteredByPersonID: String
}

type Mutation {
    CustomCreatePerson(data: PersonInput!): Person!
        @cypher(
            statement: """
                MATCH 
                    (ePerson:Person {personID: $data.enteredByPersonID})
                CREATE 
                    (person: Person {
                        personID: apoc.create.uuid(),
                        given: $data.given,
                        surname: $data.surname,
                        email: $data.email,
                        orcid: $data.orcid
                    })-[:ENTERED_BY {timestamp: datetime()}]->(ePerson)
                RETURN person
            """
        )

    CustomCreateReference(data: ReferenceInput!): Reference!
        @cypher(
            statement: """
                MATCH 
                    (person:Person {personID: $data.enteredByPersonID})
                CREATE 
                    (reference: Reference {
                        referenceID: apoc.create.uuid(),
                        title: $data.title,
                        year: $data.year,
                        publisher: $data.publisher,
                        doi: $data.doi
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                RETURN reference
            """
        )

    CustomCreateSchema(data: SchemaInput!): Schema!
        @cypher(
            statement: """
                MATCH 
                    (reference:Reference {referenceID: $data.referenceID}),
                    (person:Person {personID: $data.enteredByPersonID})
                CREATE 
                    (reference)-[:CITED_BY]->(schema:Schema {
                        schemaID: apoc.create.uuid(),
                        title: $data.title,
                        year: $data.year
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                RETURN schema
            """
        )

    CustomCreateCharacter(data: CharacterInput!): Character!
        @cypher(
            statement: """
                MATCH 
                    (schema:Schema {schemaID: $data.schemaID}),
                    (person:Person {personID: $data.enteredByPersonID})
                CREATE 
                    (schema)<-[:CHARACTER_OF]-(character:Character {
                        characterID: apoc.create.uuid(),
                        name: $data.name
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                RETURN character
            """
        )

    CustomCreateState(data: StateInput!): State!
        @cypher(
            statement: """
                MATCH 
                    (person:Person {personID: $data.enteredByPersonID})
                CALL apoc.case([
                    $data.characterID is not null, "MATCH (parent:Character {characterID: characterID}) RETURN parent",
                    $data.parentStateID is not null, "MATCH (parent:State {stateID: parentStateID}) RETURN parent"],
                    'RETURN "" as parent',
                    {characterID: $data.characterID, parentStateID: $data.parentStateID}
                ) YIELD value 
                WITH value.parent as parent, person
                    CREATE 
                        (parent)<-[:STATE_OF]-(state:State {
                            stateID: apoc.create.uuid(),
                            name: $data.name
                        })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                    RETURN state           
            """
        )

    CustomCreateDescription(data: DescriptionInput!): Description!
        @cypher(
            statement: """
                MATCH 
                    (schema:Schema {schemaID: $data.schemaID}),
                    (person:Person {personID: $data.enteredByPersonID})
                OPTIONAL MATCH
                    (specimen:Specimen {specimenID: $data.specimenID})
                CREATE 
                    (schema)<-[:APPLICATION_OF]-(description: Description {
                        descriptionID: apoc.create.uuid(),
                        type: $data.type,
                        name: $data.name,
                        family: $data.family,
                        genus: $data.genus,
                        species: $data.species
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                WITH description, specimen
                CALL apoc.do.when(
                    specimen is not null, 
                    "CREATE (specimen)-[:DESCRIBED_BY]->(description) RETURN description", 
                    'RETURN description',
                    {specimen: specimen, description: description}
                ) YIELD value
                RETURN value.description AS description                
            """
        )
        
    CustomCreateCharacterInstance(data: CharacterInstanceInput!): CharacterInstance!
        @cypher(
            statement: """
                MATCH 
                    (description:Description {descriptionID: $data.descriptionID}),
                    (character:Character {characterID: $data.characterID}),
                    (state:State {stateID: $data.stateID}),
                    (person:Person {personID: $data.enteredByPersonID})
                CREATE 
                    (description)-[:DEFINED_BY]->(characterInstance:CharacterInstance {
                        characterInstanceID: apoc.create.uuid()
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person),
                    (character)<-[:INSTANCE_OF]-(characterInstance),
                    (state)<-[:HAS_STATE]-(characterInstance)
                RETURN characterInstance
            """
        )
        
    CustomCreateSpecimen(data: SpecimenInput!): Specimen!
        @cypher(
            statement: """
                MATCH 
                    (person:Person {personID: $data.enteredByPersonID}),
                    (organ:Organ {organID: $data.organID})
                OPTIONAL MATCH
                    (description:Description {descriptionID: $data.descriptionID})
                OPTIONAL MATCH
                    (otu:Description {descriptionID: $data.otuID})
                CREATE
                    (organ)<-[:IS_TYPE]-(specimen:Specimen {
                        name: $data.name,
                        locality: $data.locality,
                        preservationMode: $data.preservationMode,
                        idigbiouuid: $data.idigbiouuid
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                WITH specimen, description, otu
                    CALL apoc.do.when(
                        description IS NOT NULL,
                        "CREATE (description)<-[:DESCRIBED_BY]-(specimen) RETURN specimen",
                        "",
                        {description: description, specimen: specimen}) YIELD value
                    WITH value.specimen AS specimen, otu
                    CALL apoc.do.when(
                        otu IS NOT NULL,
                        "CREATE (otu)<-[:EXAMPLE_OF]-(specimen) RETURN specimen",
                        "",
                        {otu: otu, specimen: specimen}) YIELD value
                RETURN value.specimen as specimen           
            """
        )
        
    CustomCreateOrgan(data: OrganInput!): Organ!
        @cypher(
            statement: """
                MATCH 
                    (person:Person {personID: $data.enteredByPersonID})
                CREATE 
                    (organ:Organ {
                        organID: apoc.create.uuid(),
                        type: $data.type
                    })-[:ENTERED_BY {timestamp: datetime()}]->(person)
                RETURN organ
            """
        )
}
